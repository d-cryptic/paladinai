version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: paladinai-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-paladinai_checkpoints}
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
      - ./scripts/init-replica-set.js:/docker-entrypoint-initdb.d/init-replica-set.js:ro
      - ./scripts/init-database.js:/docker-entrypoint-initdb.d/init-database.js:ro
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - paladinai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb-express:
    image: mongo-express:1.0.2
    container_name: paladinai-mongodb-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGODB_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGODB_EXPRESS_PASSWORD:-express123}
      ME_CONFIG_MONGODB_SERVER: mongodb
    ports:
      - "8082:8081"
    networks:
      - paladinai-network
    depends_on:
      mongodb:
        condition: service_healthy

  # MongoDB replica set initializer (runs once)
  mongodb-replica-init:
    image: mongo:7.0
    container_name: paladinai-mongodb-replica-init
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./scripts/init-replica-set.js:/scripts/init-replica-set.js:ro
    command: >
      bash -c "
        echo 'Waiting for MongoDB to be ready...'
        sleep 10
        echo 'Initializing replica set...'
        mongosh --host mongodb:27017 /scripts/init-replica-set.js
        echo 'Replica set initialization completed'
      "
    networks:
      - paladinai-network
    restart: "no"

  # Qdrant Vector Database for Memory Storage
  qdrant:
    image: qdrant/qdrant:latest
    container_name: paladinai-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - paladinai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Neo4j Graph Database for Memory Relationships
  neo4j:
    image: neo4j:5.15-community
    container_name: paladinai-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-paladinai_neo4j_pass}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL:-512m}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX:-1G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE:-512m}
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./data/neo4j/data:/data
      - ./data/neo4j/logs:/logs
      - ./data/neo4j/import:/var/lib/neo4j/import
      - ./data/neo4j/plugins:/plugins
    networks:
      - paladinai-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USERNAME:-neo4j}", "-p", "${NEO4J_PASSWORD:-paladinai_neo4j_pass}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  paladinai-network:
    driver: bridge
    name: paladinai-network

volumes:
  mongodb-data:
    driver: local
  qdrant-data:
    driver: local
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
